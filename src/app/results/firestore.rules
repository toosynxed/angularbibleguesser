rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Lobbies collection
    match /lobbies/{lobbyId} {

      // Anyone who is authenticated can create a new lobby.
      allow create: if request.auth != null
                    // Ensure the user creating the lobby is the host.
                    && request.resource.data.hostId == request.auth.uid
                    // Enforce initial game state.
                    && request.resource.data.gameState == 'waiting'
                    && request.resource.data.currentRound == 0;

      // A user can read a lobby if they are a player in it.
      allow read: if request.auth != null && exists(/databases/$(database)/documents/lobbies/$(lobbyId)/players/$(request.auth.uid));

      // Rules for updating a lobby document.
      allow update: if request.auth != null && exists(/databases/$(database)/documents/lobbies/$(lobbyId)/players/$(request.auth.uid))
                     && resource.data.hostId == request.auth.uid; // Only the host can change most things.

      // Allow any player to submit their own guess.
      // This is more specific than the general update rule.
      allow update: if request.auth != null
                    // Check that the player exists in the subcollection.
                    && exists(/databases/$(database)/documents/lobbies/$(lobbyId)/players/$(request.auth.uid))
                    // Ensure the game is in progress.
                    && resource.data.gameState == 'in-progress'
                    // A player can only write to their own guess field for the current round.
                    && request.resource.data.keys().hasOnly(['guesses.round_' + resource.data.currentRound + '.' + request.auth.uid]);


      // Players subcollection within a lobby
      match /players/{userId} {

        // Allow any authenticated user to join a lobby that is in a 'waiting' state.
        allow create: if request.auth != null
                      && request.auth.uid == userId // Users can only add themselves.
                      && get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.gameState == 'waiting';

        // Players can read the list of other players in their lobby.
        allow read: if request.auth != null && exists(/databases/$(database)/documents/lobbies/$(lobbyId)/players/$(request.auth.uid));

        // Players can't update their status (e.g., can't make themselves host).
        // They can only be deleted (leave the game), which we can add later if needed.
        allow update: if false;

        // Allow players to leave a lobby (delete their own player document).
        allow delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // Default deny all other access to prevent accidental exposure of other collections.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
